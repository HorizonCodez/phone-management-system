generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  type          UserType
  customer      Customer?      @relation("app_userTocustomer")
  phoneShop     PhoneShop?     @relation("app_userTophone_shop")
  siteModerator SiteModerator? @relation("app_userTosite_moderator")

  @@map("app_user")
}

model City {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(255)
  zipCode    Int         @unique
  customers  Customer[]  @relation("cityTocustomer")
  phoneShops PhoneShop[] @relation("cityTophone_shop")

  @@map("city")
}

model Customer {
  id             Int             @id @default(autoincrement())
  firstName      String          @db.VarChar(255)
  lastName       String          @db.VarChar(255)
  phone          String          @db.VarChar(15)
  address        String?         @db.VarChar(1000)
  userId         Int             @unique
  cityId         Int
  profileImageId Int?
  city           City            @relation("cityTocustomer", fields: [cityId], references: [id])
  profileImage   Image?          @relation("customerToimage", fields: [profileImageId], references: [id])
  appUser        AppUser         @relation("app_userTocustomer", fields: [userId], references: [id])
  orders         CustomerOrder[] @relation("customerTocustomer_order")
  reviews        Review[]        @relation("customerToreview")

  @@index([userId], name: "customer_app_user_id_fk")
  @@index([cityId], name: "customer_city_id_fk")
  @@index([profileImageId], name: "customer_image_id_fk")
  @@map("customer")
}

model CustomerOrder {
  id                                 Int       @id @default(autoincrement())
  phoneShopId                        Int
  customerId                         Int?
  itemId                             Int
  itemQty                            Int
  deliveryPrice                      Decimal?  @db.Decimal(10, 2)
  totalAmount                        Decimal   @db.Decimal(10, 2)
  status                             String    @db.VarChar(255)
  address                            String    @db.VarChar(1000)
  reviewId                           Int?
  item                               Item      @relation("customer_orderToItem", fields: [itemId], references: [id])
  customer                           Customer? @relation("customerTocustomer_order", fields: [customerId], references: [id])
  phoneShop                          PhoneShop @relation("customer_orderTophone_shop", fields: [phoneShopId], references: [id])
  review                             Review?   @relation("customer_order_review_idToreview", fields: [reviewId], references: [id])
  reviewCustomerOrderToreviewOrderId Review[]  @relation("customer_orderToreview_order_id")

  @@index([reviewId], name: "customer_order_review_id_fk")
  @@index([customerId], name: "order_customer_id_fk")
  @@index([phoneShopId], name: "order_phone_shop_id_fk")
  @@map("customer_order")
}

model Image {
  id                                      Int             @id @default(autoincrement())
  url                                     String          @db.VarChar(1000)
  type                                    ImageType
  customers                               Customer[]      @relation("customerToimage")
  itemImages                              ItemImage[]     @relation("imageToitem_image")
  phoneShopImageTophoneShopProfileImageId PhoneShop[]     @relation("imageTophone_shop_profile_image_id")
  phoneShopImageTophoneBrImageId          PhoneShop[]     @relation("imageTophone_shop_br_image_id")
  siteModerator                           SiteModerator[] @relation("imageTosite_moderator")

  @@map("image")
}

model Item {
  id             Int         @id @default(autoincrement())
  title          String      @db.VarChar(255)
  description    String      @db.VarChar(5000)
  price          Decimal     @db.Decimal(10, 2)
  availableStock Int
  shopId         Int
  phoneShop      PhoneShop   @relation("itemTo_phoneShop", fields: [shopId], references: [id])
  itemImages     ItemImage[] @relation("itemToitem_image")
  reviews        Review[]    @relation("itemToreview")

  CustomerOrder CustomerOrder[] @relation("customer_orderToItem")
  @@map("item")
}

model ItemImage {
  id         Int   @id @default(autoincrement())
  itemId     Int
  imageId    Int
  imageIndex Int?  @default(0)
  image      Image @relation("imageToitem_image", fields: [imageId], references: [id])
  item       Item  @relation("itemToitem_image", fields: [itemId], references: [id])

  @@index([imageId], name: "item_images_image_id_fk")
  @@index([itemId], name: "item_images_item_id_fk")
  @@map("item_image")
}

model PhoneShop {
  id             Int             @id @default(autoincrement())
  shopName       String?         @db.VarChar(500)
  phone          String?         @db.VarChar(15)
  address        String          @db.VarChar(1000)
  isVerified     Boolean         @default(false)
  cityId         Int
  userId         Int             @unique
  profileImageId Int?
  brImageId      Int?
  city           City            @relation("cityTophone_shop", fields: [cityId], references: [id])
  profileImage   Image?          @relation("imageTophone_shop_profile_image_id", fields: [profileImageId], references: [id])
  brImage        Image?          @relation("imageTophone_shop_br_image_id", fields: [brImageId], references: [id])
  appUser        AppUser         @relation("app_userTophone_shop", fields: [userId], references: [id])
  orders         CustomerOrder[] @relation("customer_orderTophone_shop")

  Item Item[] @relation("itemTo_phoneShop")
  @@index([userId], name: "phone_shop_app_user_id_fk")
  @@index([cityId], name: "phone_shop_city_id_fk")
  @@index([profileImageId], name: "phone_shop_image_id_fk")
  @@index([brImageId], name: "phone_shop_br_image_id_fk")
  @@map("phone_shop")
}

model Review {
  id                                         Int             @id @default(autoincrement())
  customerId                                 Int
  itemId                                     Int?
  orderId                                    Int?
  comment                                    String?         @db.VarChar(500)
  rating                                     Int?
  customer                                   Customer        @relation("customerToreview", fields: [customerId], references: [id])
  item                                       Item?           @relation("itemToreview", fields: [itemId], references: [id])
  customerOrderCustomerOrderToreviewOrderId  CustomerOrder?  @relation("customer_orderToreview_order_id", fields: [orderId], references: [id])
  customerOrderCustomerOrderReviewIdToreview CustomerOrder[] @relation("customer_order_review_idToreview")

  @@index([customerId], name: "review_customer_id_fk")
  @@index([itemId], name: "review_item_id_fk")
  @@index([orderId], name: "review_order_id_fk")
  @@map("review")
}

model SiteModerator {
  id             Int     @id @default(autoincrement())
  employeeNumber String  @unique @db.VarChar(20)
  firstName      String  @db.VarChar(255)
  lastName       String  @db.VarChar(255)
  userId         Int     @unique
  profileImageId Int?
  profileImage   Image?  @relation("imageTosite_moderator", fields: [profileImageId], references: [id])
  appUser        AppUser @relation("app_userTosite_moderator", fields: [userId], references: [id])

  @@index([userId], name: "site_moderator_app_user_id_fk")
  @@index([profileImageId], name: "site_moderator_image_id_fk")
  @@map("site_moderator")
}

enum ImageType {
  Profile
  Logo
  BR
  Item
}

enum UserType {
  Admin
  Customer
  Shop
  Moderator
}
